import React, { useState, useEffect } from 'react';
import { Grid, Button, Typography, Box, TextField, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';

const UserDataForm = () => {
  // States for user data and unsaved changes
  const [name, setName] = useState('');
  const [address, setAddress] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [userId, setUserId] = useState(Math.floor(Math.random() * 10000));
  const [unsavedChanges, setUnsavedChanges] = useState(false);
  const [openDialog, setOpenDialog] = useState(false);

  // Handle form data change
  const handleChange = (e) => {
    setUnsavedChanges(true);
    const { name, value } = e.target;
    if (name === 'name') setName(value);
    if (name === 'address') setAddress(value);
    if (name === 'email') setEmail(value);
    if (name === 'phone') setPhone(value);
  };

  // Handle form submission
  const handleSave = () => {
    // Save data to local storage
    const userData = { userId, name, address, email, phone };
    localStorage.setItem('userData', JSON.stringify(userData));
    setUnsavedChanges(false); // Reset unsaved changes flag
    alert('Data Saved');
  };

  // Prompt user if there are unsaved changes before closing the window
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (unsavedChanges) {
        const message = 'You have unsaved changes. Are you sure you want to leave?';
        e.returnValue = message; // Standard for most browsers
        return message; // For some browsers
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [unsavedChanges]);

  // Handle dialog close and save data
  const handleDialogClose = (confirm) => {
    if (confirm) {
      handleSave();
    }
    setOpenDialog(false);
  };

  return (
    <Grid container spacing={2} style={{ height: '100vh', padding: '20px' }}>
      {/* User Data Form Section */}
      <Grid item xs={12}>
        <Box border={1} borderRadius={2} padding={3}>
          <Typography variant="h6" style={{ marginBottom: '10px' }}>User Data Form</Typography>
          
          <TextField 
            label="Name" 
            variant="outlined" 
            fullWidth 
            margin="normal" 
            name="name"
            value={name} 
            onChange={handleChange}
          />
          <TextField 
            label="Address" 
            variant="outlined" 
            fullWidth 
            margin="normal" 
            name="address"
            value={address} 
            onChange={handleChange}
          />
          <TextField 
            label="Email" 
            variant="outlined" 
            fullWidth 
            margin="normal" 
            name="email"
            value={email} 
            onChange={handleChange}
          />
          <TextField 
            label="Phone" 
            variant="outlined" 
            fullWidth 
            margin="normal" 
            name="phone"
            value={phone} 
            onChange={handleChange}
          />
          
          {/* Autogenerated User ID */}
          <TextField 
            label="User ID (Autogenerated)" 
            variant="outlined" 
            fullWidth 
            margin="normal" 
            value={userId} 
            disabled
          />
          
          {/* Save Button */}
          <Button variant="contained" color="primary" fullWidth onClick={handleSave}>
            Save
          </Button>
        </Box>
      </Grid>

      {/* Unsaved Changes Dialog */}
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogTitle>Unsaved Changes</DialogTitle>
        <DialogContent>
          <Typography>There are unsaved changes. Do you want to save before leaving?</Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => handleDialogClose(false)} color="secondary">Discard</Button>
          <Button onClick={() => handleDialogClose(true)} color="primary">Save</Button>
        </DialogActions>
      </Dialog>
    </Grid>
  );
};

export default UserDataForm;
